{
    "primitives": {
        "and": {
            "short_description": "checks if both of two conditions are true",
            "search_terms": [
                "if",
                "or",
                "if-else",
                "xor"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "if",
                "or",
                "if-else",
                "xor"
            ],
            "library_models": []
        },
        "any": {
            "short_description": "checks if there are any agents in an agentset",
            "search_terms": [
                "all",
                "count"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "all",
                "count"
            ],
            "library_models": []
        },
        "breed": {
            "short_description": "defines a breed or variant of turtle",
            "search_terms": [
                "create-<breed>"
            ],
            "agents": [
                "observer"
            ],
            "see_also": [
                "create-<breed>"
            ],
            "library_models": []
        },
        "create-links-with": {
            "short_description": "creates links with every agent in an agentset",
            "search_terms": [],
            "agents": [
                "turtles"
            ],
            "see_also": [
                "create-link-to",
                "create-links-from"
            ],
            "library_models": []
        },
        "diffuse": {
            "short_description": "speads a patch variable around to its neighbors",
            "search_terms": [],
            "agents": [
                "patches"
            ],
            "see_also": [],
            "library_models": []
        },
        "distance": {
            "short_description": "reports the shortest distance between two agents",
            "search_terms": [
                "distancexy"
            ],
            "agents": [
                "turtles",
                "patches"
            ],
            "see_also": [
                "distancexy"
            ],
            "library_models": []
        },
        "globals": {
            "short_description": "defines variables that can be used throughout the whole model",
            "search_terms": [
                ""
            ],
            "agents": [
                "observer"
            ],
            "see_also": [],
            "library_models": []
        },
        "if-else": {
            "short_description": "execute specific code if a condition is true, otherwise, execute other code",
            "search_terms": [
                "if",
                "ifelse-value"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "if",
                "ifelse-value"
            ],
            "library_models": []
        },
        "ifelse-value": {
            "short_description": "execute different code for a number of different conditions",
            "search_terms": [
                "if",
                "if-else"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "if",
                "if-else"
            ],
            "library_models": []
        },
        "in-cone": {
            "short_description": "reports members of an agentset within a \"cone-of-vision\" for a turtle",
            "search_terms": [
                "in-radius",
                "other"
            ],
            "agents": [
                "turtles"
            ],
            "see_also": [
                "in-radius",
                "other"
            ],
            "library_models": []
        },
        "in-radius": {
            "short_description": "reports members of an agentset within a certain distance of an agent",
            "search_terms": [
                "in-cone",
                "other"
            ],
            "agents": [
                "turtles",
                "patches"
            ],
            "see_also": [
                "in-cone",
                "other"
            ],
            "library_models": []
        },
        "layout-circle": {
            "short_description": "equally space turtles in a circle around the center of the world",
            "search_terms": [
                "layout-radial",
                "layout-spring",
                "layout-tuttle"
            ],
            "agents": [
                "observer"
            ],
            "see_also": [
                "layout-radial",
                "layout-spring",
                "layout-tuttle"
            ],
            "library_models": []
        },
        "link-neighbors": {
            "short_description": "report all agents connected by links",
            "search_terms": [
                ""
            ],
            "agents": [
                "turtles"
            ],
            "see_also": [],
            "library_models": []
        },
        "links": {
            "short_description": "reports the agentset of all links in the model",
            "search_terms": [],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "links",
                "link-neighbor"
            ],
            "library_models": []
        },
        "n-of": {
            "short_description": "randomly report \"n\" agents from an agentset",
            "search_terms": [
                "up-to-n-of"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "up-to-n-of"
            ],
            "library_models": []
        },
        "of": {
            "short_description": "report the value of an agent-owned variable from another context",
            "search_terms": [
                ""
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [],
            "library_models": []
        },
        "or": {
            "short_description": "checks if either of two conditions is true",
            "search_terms": [
                "if",
                "if-else",
                "and",
                "xor"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "if",
                "if-else",
                "and",
                "xor"
            ],
            "library_models": []
        },
        "random": {
            "short_description": "generate a random whole number within a specified range",
            "search_terms": [],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "random-float",
                "random-normal"
            ],
            "library_models": []
        },
        "random-float": {
            "short_description": "generate a random real (non-whole) number within a specified range",
            "search_terms": [
                "random",
                "random-normal"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "random",
                "random-normal"
            ],
            "library_models": []
        },
        "scale-color": {
            "short_description": "generate a shade of a base hue (color) based on a given value",
            "search_terms": [
                "approximate-rgb",
                "approximate-hsb"
            ],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "approximate-rgb",
                "approximate-hsb"
            ],
            "library_models": []
        },
        "setxy": {
            "short_description": "set the position of a turtle (in terms of X and Y coordinates)",
            "search_terms": [
                "move-to",
                "xcor",
                "ycor"
            ],
            "agents": [
                "turtles"
            ],
            "see_also": [
                "move-to",
                "xcor",
                "ycor"
            ],
            "library_models": []
        },
        "sort-by": {
            "short_description": "sort a list based on a user-defined comparison reporter",
            "search_terms": [],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "sort-on",
                "sort"
            ],
            "library_models": []
        },
        "sort-on": {
            "short_description": "sort an agentset into a list ordered by the value of a given reporter",
            "search_terms": [],
            "agents": [
                "utilities"
            ],
            "see_also": [
                "sort-by",
                "sort"
            ],
            "library_models": []
        },
        "tie": {
            "short_description": "make a link into a solid connection that can move turtles in the world",
            "search_terms": [],
            "agents": [
                "links"
            ],
            "see_also": [],
            "library_models": []
        }
    }
}
